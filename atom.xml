<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chlins&#39; Blog</title>
  
  <subtitle>自说自话</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zcycn.top/"/>
  <updated>2018-09-14T10:09:02.177Z</updated>
  <id>https://zcycn.top/</id>
  
  <author>
    <name>Chlins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sync.Pool使用</title>
    <link href="https://zcycn.top/2018/09/14/sync-Pool%E4%BD%BF%E7%94%A8/"/>
    <id>https://zcycn.top/2018/09/14/sync-Pool使用/</id>
    <published>2018-09-14T08:47:37.000Z</published>
    <updated>2018-09-14T10:09:02.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h3><p>这是在<code>golang</code>1.3版本的时候新加入标准包sync里面的一个新特性，目的就是提供一个通用的对象池，复用临时对象，减少GC的压力，并且保证pool中的资源时协程安全的。</p><p>pool的用法也十分的简单，操作的话其实只有两个方法，分别是<code>Put</code>和<code>Get</code>，语义是放入资源和取出资源。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">var</span> pool sync.Pool</span><br><span class="line"></span><br><span class="line">      fmt.Println(pool.Get())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们得到的结果是<code>&lt;nil&gt;</code>，是因为在声明<code>pool</code>的时候我们没有给它设置初始化资源的方法<code>New func() interface{}</code>，现在我们声明一个方法</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pool := &amp;sync.Pool&#123;New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;&#123;<span class="keyword">return</span> <span class="string">"hello"</span>&#125;&#125;</span><br><span class="line">    fmt.Println(pool.Get())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们得到的输出就是<code>hello</code>了，假设我们再次<code>Get</code>，此时会得到还是<code>hello</code>，那是因为我们传递的<code>New</code>方法就是返回一个<code>hello</code>对象，当<code>pool</code>中没有对象了，就会调用<code>New</code>分配一个资源出来，假设<code>pool</code>中有资源，还是会优先返回其中的资源，如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pool := &amp;sync.Pool&#123;New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;&#123;<span class="keyword">return</span> <span class="string">"hello"</span>&#125;&#125;</span><br><span class="line">    pool.Put(<span class="string">"world"</span>)</span><br><span class="line">    fmt.Println(pool.Get())</span><br><span class="line">    fmt.Println(pool.Get())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时首先打印<code>world</code>再打印<code>hello</code></p><p>最后在使用<code>pool</code>的时候同样也有一些注意点，如果不注意就会踩坑（😭）</p><p>注意：</p><ul><li><p>放入<code>pool</code>中的对象，并不会一直等待被<code>Get</code>，每过一段时间就会被GC回收，（所以千万不要把<code>pool</code>当成<code>cache</code>用！！！）</p></li><li><p><code>pool</code>的应用场景主要是一些临时的状态无关的数据，所以一些有状态的数据并不适合存储在其中（例如数据库连接等）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;sync-Pool&quot;&gt;&lt;a href=&quot;#sync-Pool&quot; class=&quot;headerlink&quot; title=&quot;sync.Pool&quot;&gt;&lt;/a&gt;sync.Pool&lt;/h3&gt;&lt;p&gt;这是在&lt;code&gt;golang&lt;/code&gt;1.3版本的时候新加入标准包sync里面
      
    
    </summary>
    
    
      <category term="golang" scheme="https://zcycn.top/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zcycn.top/2018/08/14/hello-world/"/>
    <id>https://zcycn.top/2018/08/14/hello-world/</id>
    <published>2018-08-14T11:47:17.000Z</published>
    <updated>2018-09-14T10:13:19.890Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Test-Code"><a href="#Test-Code" class="headerlink" title="Test Code"></a>Test Code</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
