                                                                                                                                                                                                                                                                                                                                                                                                                                [{"title":"sync.Pool使用","date":"2018-09-14T08:47:37.000Z","url":"/2018/09/14/sync-Pool使用/","tags":["golang"],"content":"sync.Pool这是在golang1.3版本的时候新加入标准包sync里面的一个新特性，目的就是提供一个通用的对象池，复用临时对象，减少GC的压力，并且保证pool中的资源时协程安全的。pool的用法也十分的简单，操作的话其实只有两个方法，分别是Put和Get，语义是放入资源和取出资源。此时我们得到的结果是&lt;nil&gt;，是因为在声明pool的时候我们没有给它设置初始化资源的方法New func() interface{}，现在我们声明一个方法此时我们得到的输出就是hello了，假设我们再次Get，此时会得到还是hello，那是因为我们传递的New方法就是返回一个hello对象，当pool中没有对象了，就会调用New分配一个资源出来，假设pool中有资源，还是会优先返回其中的资源，如下：此时首先打印world再打印hello最后在使用pool的时候同样也有一些注意点，如果不注意就会踩坑（😭）注意：放入pool中的对象，并不会一直等待被Get，每过一段时间就会被GC回收，（所以千万不要把pool当成cache用！！！）pool的应用场景主要是一些临时的状态无关的数据，所以一些有状态的数据并不适合存储在其中（例如数据库连接等）"},{"title":"Hello World","date":"2018-08-14T11:47:17.000Z","url":"/2018/08/14/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new postMore info: WritingRun serverMore info: ServerGenerate static filesMore info: GeneratingDeploy to remote sitesMore info: DeploymentTest Code"}]